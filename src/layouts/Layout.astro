---
import Header from "../components/Navigation.astro";
import { ViewTransitions } from 'astro:transitions';
import '../fonts.css';
import '../style.css';

interface Props {
	title: string;
	description?: string;
	image?: string;
}

const { title, description, image } = Astro.props;
---

<!doctype html>
<html lang="en" class="font-['SuisseIntl']">
	<head>
		<meta charset="UTF-8" />
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="keywords" content="design, ui, ux, b2b, b2c, saas">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.jpg" />
		<meta name="generator" content={Astro.generator} />
		<meta property="og:image" content="{image}" />
		<meta property="og:image:type" content="image/jpeg" />
		<meta property="og:image:width" content="1200" />
		<meta property="og:image:height" content="675" />
		<meta property="og:image:alt" content="A website cover" />
		<meta name="twitter:site" content="@haiku4real" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={image} />
		<ViewTransitions />

		<style>
			.removed-item {
			  animation: removed-item-animation 0.5s ease-in-out forwards;
			}
		  
			@keyframes removed-item-animation {
			  0% {
				opacity: 1;
				transform: translateY(0);
			  }
			  100% {
				opacity: 0;
				transform: translateY(-320px); /* Adjust the value as needed */
			  }
			}

			#col-1 {
				padding: 30px;
			}
		</style>
	</head>
	<body class="font-['SuisseIntl']">
		<Header />
		<slot />
		
		<script>
            document.addEventListener('DOMContentLoaded', () => {
                const columnOne = document.getElementById("col-1") as HTMLElement | null;
                const columnTwo = document.getElementById("col-2") as HTMLElement | null;
                let card: Element | null = null;
                let intervalId: number | null = null;

                function moveCards() {
                    if (columnOne) {
                        card = columnOne.firstElementChild;
                    } else {
                        console.log("Element with ID 'col-1' not found.");
                        return; // Exit the function if the element is not found
                    }

                    function removeCard(item: Element) {
                        item.remove();
                    }

                    function addCard(item: Element) {
                        if (columnTwo) {
                            columnTwo.appendChild(item);
                        }
                    }

                    function moveCardWithAnimation(item: Element) {
                        item.classList.remove("resetTranslate");
                        const animation = item.animate([
                            { transform: 'translateX(0)' },
                            { transform: `translateX(${(columnTwo?.getBoundingClientRect().left || 0) - (columnOne?.getBoundingClientRect().left || 0)}px)` }
                        ], {
                            duration: 800,
                            easing: 'cubic-bezier(0.3, 1, 0.7, 1)',
                            fill: 'forwards'
                        });

                        animation.onfinish = () => {
                            removeCard(item);
                            if (columnOne) {
                                animateRemainingCards(columnOne);
                            }
                            addCard(item);
                            item.classList.add("resetTranslate");
                            if (intervalId === null) {
                                intervalId = window.setTimeout(moveCards, 3000); // Call moveCards again after 3 seconds
                            }
                        };

                        function animateRemainingCards(column: HTMLElement) {
                            const cards = column.children;

                            if (cards) {
                                for (let i = 0; i < cards.length; i++) {
                                    cards[i].animate([
                                        { transform: 'translateY(90px)' },
                                        { transform: 'translateY(0px)' }
                                    ], {
                                        duration: 500,
                                        easing: 'cubic-bezier(0.3, 1, 0.7, 1)',
                                        fill: 'forwards'
                                    });
                                }
                            }

                            if (cards[3]) {
                                cards[3].animate([
                                    { opacity: 0 },
                                    { opacity: 1 }
                                ], {
                                    duration: 500,
                                    easing: 'cubic-bezier(0.3, 1, 0.7, 1)',
                                    fill: 'forwards'
                                });
                            }
                        }
                    }

                    function vanishCard() {
                        if (card) {
                            card.animate([
                                { opacity: 1 },
                                { opacity: 0 }
                            ], {
                                duration: 500,
                                easing: 'cubic-bezier(0.3, 1, 0.7, 1)',
                                fill: 'forwards'
                            });
                        }
                    }

                    function returnCard(item: Element) {
                        removeCard(item);
                        if (columnOne) {
                            columnOne.appendChild(item);
                        }
                        item.classList.remove("resetTranslate");
                    }

                    if (card) {
                        moveCardWithAnimation(card);
                    }

                    if (intervalId === null) {
                        intervalId = window.setTimeout(() => {
                            vanishCard();
                            window.setTimeout(() => {
                                if (card) {
                                    returnCard(card);
                                }
                            }, 1550);
                        }, 1550);
                    }
                }

                function handleVisibilityChange() {
                    if (document.hidden) {
                        if (intervalId !== null) {
                            window.clearTimeout(intervalId);
                            intervalId = null;
                        }
                    } else {
                        moveCards();
                    }
                }

                document.addEventListener("visibilitychange", handleVisibilityChange);

                if (!document.hidden) {
                    moveCards(); // Start the animation loop if the page is visible
                }
            });

        </script>
        
        

	</body>
</html>
